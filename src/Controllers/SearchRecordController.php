<?php
/*
 * NewApiLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 07/01/2016
 */

namespace NewApiLib\Controllers;

use NewApiLib\APIException;
use NewApiLib\APIHelper;
use NewApiLib\Configuration;
use Unirest\Unirest;
class SearchRecordController {

    /* private fields for configuration */

    /**
     * Your API Key 
     * @var string
     */
    private $apiKey;

    /**
     * Constructor with authentication and configuration parameters
     */
    function __construct($apiKey)
    {
        $this->apiKey = $apiKey ? $apiKey : Configuration::$apiKey;
    }

    /**
	 * Array access utility method
     * @param  array          $arr         Array of values to read from
     * @param  string         $key         Key to get the value from the array
     * @param  mixed|null     $default     Default value to use if the key was not found */
    private function val($arr, $key, $default = NULL)
    {
        if(isset($arr[$key])) {
            return is_bool($arr[$key]) ? var_export($arr[$key], true) : $arr[$key];
        }
        return $default;
    }

    /**
     * The Search Records API call returns a result set in response to a search query. The v3 Search Records API request parameters and response format differs significantly from the deprecated v1 & v2 Search Records API call.
     * @param  array  $options    Array with all options for search
     * @param  string          $options['text']               Required parameter: TODO: type description here
     * @param  string|null     $options['mand']               Optional parameter: Restricts search to records matching all facet values. Example: "&and[content_partner][]=Kete+Horowhenua&and[category][]=Images"
     * @param  string|null     $options['direction']          Optional parameter:  the direction in which the results are sorted. Possible values: "desc", "asc".
     * @param  int|null        $options['facetPerPage']       Optional parameter: the number of facets returned for every page. (Defaults to 10.)
     * @param  string|null     $options['facets']             Optional parameter: a list of facet fields to include in the output. See the note on facets below for more information. Example: "&facets=year,category"
     * @param  int|null        $options['facetsPage']         Optional parameter: the facet page to iterate over a set of facets. . (Defaults to 1.)
     * @param  double|null     $options['geoBbox']            Optional parameter: a geographic bounding box scoping a search to a geographic region. Order of latitude-longitude coordinates is north, west, south, east. For example, &geo_bbox=-41,174,-42,175 searches the Wellington region.
     * @param  string|null     $options['mor']                Optional parameter: Restricts search to records matching any of the specified facet values. Example: "&or[category][]=Image&or[category][]=Videos"without 
     * @param  int|null        $options['page']               Optional parameter: the page when iterating over a set of records. (Defaults to 1.)
     * @param  int|null        $options['perPage']            Optional parameter: the number of records the user wishes returned up to a maximum of 100. (Defaults to 20.)
     * @param  string|null     $options['sort']               Optional parameter: the field upon which results are sorted. Defaults to relevance sorting. The sort field must be one of: "category", "content_partner", "date", "syndication_date".
     * @param  string|null     $options['without']            Optional parameter: Restricts search to records that don't match any of the facet values. Example: "&without[category][]=Newspapers"
     * @return mixed response from the API call*/
    public function searchRecord (
                $options) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/records.json';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'text'           => $this->val($options, 'text'),
            'and'            => $this->val($options, 'mand'),
            'direction'      => $this->val($options, 'direction'),
            'facet_per_page' => $this->val($options, 'facetPerPage', 10),
            'facets'         => $this->val($options, 'facets'),
            'facets_page'    => $this->val($options, 'facetsPage', 1),
            'geo_bbox'       => $this->val($options, 'geoBbox'),
            'or'             => $this->val($options, 'mor'),
            'page'           => $this->val($options, 'page', 1),
            'per_page'       => $this->val($options, 'perPage', 20),
            'sort'           => $this->val($options, 'sort'),
            'without'        => $this->val($options, 'without'),
            'api_key' => $this->apiKey,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
}