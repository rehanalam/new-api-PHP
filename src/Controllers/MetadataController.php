<?php
/*
 * NewApiLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 07/01/2016
 */

namespace NewApiLib\Controllers;

use NewApiLib\APIException;
use NewApiLib\APIHelper;
use NewApiLib\Configuration;
use Unirest\Unirest;
class MetadataController {

    /* private fields for configuration */

    /**
     * Your API Key 
     * @var string
     */
    private $apiKey;

    /**
     * Constructor with authentication and configuration parameters
     */
    function __construct($apiKey)
    {
        $this->apiKey = $apiKey ? $apiKey : Configuration::$apiKey;
    }

    /**
	 * Array access utility method
     * @param  array          $arr         Array of values to read from
     * @param  string         $key         Key to get the value from the array
     * @param  mixed|null     $default     Default value to use if the key was not found */
    private function val($arr, $key, $default = NULL)
    {
        if(isset($arr[$key])) {
            return is_bool($arr[$key]) ? var_export($arr[$key], true) : $arr[$key];
        }
        return $default;
    }

    /**
     * The Get Metadata API call returns the available metadata for a specific item. The Get Metadata v3 request parameters and response format differs significantly from the depreciated Get Metadata v1 & v2 API call.
     * @param  array  $options    Array with all options for search
     * @param  string     $options['fields']        Required parameter: A comma separated list of fields or groups of fields to be returned for each record. Possible groups include 'default' and 'verbose'. If no value is specified, then the 'default' field group will be returned.
     * @param  string     $options['recordId']      Required parameter: Record IDs are identified in the metadata_url field of a results set. 23034653 is an example record ID.
     * @return mixed response from the API call*/
    public function getMetadata (
                $options) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/v3/records/{record_id}.json';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'record_id' => $this->val($options, 'recordId'),
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'fields'    => $this->val($options, 'fields'),
            'api_key' => $this->apiKey,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
}